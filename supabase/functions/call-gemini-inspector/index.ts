// /supabase/functions/call-gemini-inspector/index.ts
import { serve } from "std/http";
import { GoogleGenerativeAI } from "@google/generative-ai";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const genAI = new GoogleGenerativeAI(Deno.env.get("GEMINI_API_KEY")!);

async function getAdDetails(adId: number) {
    const detailApiUrl = `https://www.sauto.cz/api/v1/items/${adId}`;
    try {
        const detailResponse = await fetch(detailApiUrl, { headers: { 'User-Agent': 'Mozilla/5.0' } });
        if (!detailResponse.ok) return null;
        const detailData = await detailResponse.json();
        // --- üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API üî• ---
        console.log(`[INSPECTOR] Raw API Response for AD ID ${adId}:`);
        console.log(JSON.stringify(detailData, null, 2));
        return detailData.result;
    } catch (e) {
        console.error(`[INSPECTOR] Chyba p≈ôi naƒç√≠t√°n√≠ detailu pro ID ${adId}:`, e);
        return null;
    }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') { return new Response('ok', { headers: corsHeaders }); }

  try {
    const { userQuery, carListings } = await req.json();
    if (!userQuery || !carListings) { throw new Error("V po≈æadavku chyb√≠ 'userQuery' nebo 'carListings'."); }

    const sortedListings = carListings
      .sort((a, b) => (a.price || Infinity) - (b.price || Infinity))
      .sort((a, b) => (a.tachometer || Infinity) - (b.tachometer || Infinity));

    const topCandidates = sortedListings.slice(0, 20);
    const detailedAds = (await Promise.all(topCandidates.map(ad => getAdDetails(ad.id)))).filter(ad => ad !== null);

    const adsMap = new Map(detailedAds.map(ad => [ad.id, ad]));
    console.log(`[INSPECTOR] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –¥–ª—è ${detailedAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.`);

    if (detailedAds.length === 0) {
        return new Response(JSON.stringify({ inspected_cars: [], summary_message: "Bohu≈æel se nepoda≈ôilo naƒç√≠st podrobnosti pro nalezen√© vozy." }), { headers: { ...corsHeaders, "Content-Type": "application/json" }});
    }

    const adsForPrompt = detailedAds.map((ad) => {
      const year = ad.manufacturing_date ? new Date(ad.manufacturing_date).getFullYear() : 'neuvedeno';
      const sellerType = ad.user?.user_service?.shop_name ? `Prodejce (dealer): ${ad.user.user_service.shop_name}` : "Soukrom√Ω prodejce";

      const infoBlock = `--- Inzer√°t ID: ${ad.id} ---
- Titulek: ${ad.name}
- Cena: ${ad.price.toLocaleString('cs-CZ')} Kƒç
- Rok v√Ωroby: ${year}
- N√°jezd: ${ad.tachometer} km
- VIN: ${ad.vin || "Neuvedeno"}
- Prodejce: ${sellerType}
- Popis od prodejce: "${ad.description || 'Bez popisu'}"
- Kl√≠ƒçov√© parametry: Karos√©rie: ${ad.vehicle_body_cb?.name || "n/a"}, Palivo: ${ad.fuel_cb?.name || "n/a"}, P≈ôevodovka: ${ad.gearbox_cb?.name || "n/a"}, V√Ωkon: ${ad.engine_power ? `${ad.engine_power} kW` : 'n/a'}
- Historie: Prvn√≠ majitel: ${ad.first_owner ? 'Ano' : 'Ne'}, Zemƒõ p≈Øvodu: ${ad.country_of_origin_cb?.name || "n/a"}, Havarov√°no: ${ad.crashed_in_past ? 'Ano' : 'Ne'}
- Kompletn√≠ v√Ωbava: ${(ad.equipment_cb && Array.isArray(ad.equipment_cb)) ? ad.equipment_cb.map((eq) => eq.name).join(', ') : "Nen√≠ k dispozici"}
      `;
      return infoBlock;
    }).join('\n\n');

    const prompt = `
      Jsi ≈°piƒçkov√Ω AI auto-expert a poradce pro n√°kup ojetin. Tv√Ωm √∫kolem je se≈ôadit n√°sleduj√≠c√≠ inzer√°ty od NEJLEP≈†√ç nab√≠dky po nejhor≈°√≠ a pro 3 nejlep≈°√≠ vytvo≈ôit detailn√≠, p≈ôesvƒõdƒçivou a up≈ô√≠mnou anal√Ωzu.

      Po≈æadavek u≈æivatele: "${userQuery}"

      PRAVIDLA PRO ODPOVƒöƒé:
      1.  **Se≈ôazen√≠ v√Ωsledk≈Ø**: V JSON odpovƒõdi mus√≠ b√Ωt pole "inspected_cars" se≈ôazeno od nejlep≈°√≠ho po nejhor≈°√≠ nab√≠dku na z√°kladƒõ tv√©ho expertn√≠ho posouzen√≠ (cena, stav, n√°jezd, historie, popt√°vka u≈æivatele).
      2.  **Detailn√≠ souhrn (summary_cz)**: Napi≈° alespo≈à 2-3 vƒõty. Zaƒçni celkov√Ωm dojmem a zd≈Ørazni nejd≈Øle≈æitƒõj≈°√≠ aspekt vozu.
      3.  **Argumentace (pros_cz, cons_cz)**: Ke ka≈æd√©mu bodu p≈ôidej kr√°tk√© vysvƒõtlen√≠ a konkr√©tn√≠ √∫daj z inzer√°tu v z√°vorce.
      4.  **Roz≈°√≠≈ôen√Ω verdikt (final_verdict_cz)**: Toto je nejd≈Øle≈æitƒõj≈°√≠ ƒç√°st! Napi≈° detailn√≠ odstavec (3-5 vƒõt). Jasnƒõ ≈ôekni, zda se koupƒõ vyplat√≠. Pro koho je auto vhodn√©? Na jak√© poƒç√°teƒçn√≠ investice se m√° kupuj√≠c√≠ p≈ôipravit? Jak√© jsou dlouhodob√© vyhl√≠dky? Buƒè up≈ô√≠mn√Ω a p≈ô√≠m√Ω.
      5.  **Kontrola VIN**: Pokud VIN v inzer√°tu konƒç√≠ na "XXXXXX" nebo chyb√≠, p≈ôidej do "questions_for_seller_cz" ot√°zku na kompletn√≠ VIN.

      Seznam inzer√°t≈Ø k anal√Ωze:
      ${adsForPrompt}

      Tv√° odpovƒõƒè mus√≠ b√Ωt POUZE ve form√°tu JSON. Vytvo≈ô hlavn√≠ objekt se dvƒõma kl√≠ƒçi:
      1. "summary_message": Kr√°tk√° souhrnn√° zpr√°va pro u≈æivatele v ƒçe≈°tinƒõ.
      2. "inspected_cars": SE≈òAZEN√â pole 3 nejlep≈°√≠ch objekt≈Ø s TVOU ANAL√ùZOU:
         - "id": ID inzer√°tu (ƒç√≠slo)
         - "summary_cz": Detailn√≠, ƒçtiv√© shrnut√≠ (2-3 vƒõty).
         - "pros_cz": Pole string≈Ø s argumentovan√Ωmi plusy.
         - "cons_cz": Pole string≈Ø s argumentovan√Ωmi riziky.
         - "questions_for_seller_cz": Pole string≈Ø s kl√≠ƒçov√Ωmi ot√°zkami pro prodejce.
         - "final_verdict_cz": Detailn√≠ odstavec s fin√°ln√≠m doporuƒçen√≠m a oƒçek√°v√°n√≠m.
    `;

    const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig: { response_mime_type: "application/json" },
    });

    const aiResponse = JSON.parse(result.response.text());

    const finalInspectedCars = aiResponse.inspected_cars.map(aiCar => {
        const originalAd = adsMap.get(aiCar.id);
        if (!originalAd) return null;

        let image_urls = [];
        if (originalAd.images && originalAd.images.length > 0) {
            image_urls = originalAd.images.slice(0, 3).map(img =>
                `https:${img.url}?fl=exf|crr,1.33333,0|res,1024,768,1|wrm,/watermark/sauto.png,10,10|jpg,80,,1`
            );
        }

        return {
            id: originalAd.id,
            title: originalAd.name,
            url: `https://www.sauto.cz/osobni/detail/${originalAd.manufacturer_cb.seo_name}/${originalAd.model_cb.seo_name}/${originalAd.id}`,
            price: `${originalAd.price.toLocaleString('cs-CZ')} Kƒç`,
            images: image_urls,
            vin: originalAd.vin || null,
            seller_info: { // --- üî• –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ üî• ---
                name: originalAd.seller_info?.seller_name || originalAd.user?.user_service?.shop_name || null,
                location: originalAd.seller_info?.location?.title || null,
                phone: originalAd.phone || originalAd.seller_info?.seller_phones?.[0] || null,
                shop_name: originalAd.user?.user_service?.shop_name || null,
                shop_url: originalAd.user?.user_service?.shop_url || null
            },
            summary_cz: aiCar.summary_cz,
            pros_cz: aiCar.pros_cz,
            cons_cz: aiCar.cons_cz,
            questions_for_seller_cz: aiCar.questions_for_seller_cz,
            final_verdict_cz: aiCar.final_verdict_cz // --- üî• –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç üî• ---
        };
    }).filter(car => car !== null);

    const finalReport = {
        summary_message: aiResponse.summary_message,
        inspected_cars: finalInspectedCars, // --- üî• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã AI üî• ---
    };

    console.log("[INSPECTOR] –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–±—Ä–∞–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥.");
    return new Response(JSON.stringify(finalReport), {
      headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 200,
    });

  } catch (error) {
    console.error(`[INSPECTOR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    return new Response(JSON.stringify({ error: error.message }), {
        status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" }
    });
  }
});